name: Deploy React App to AWS

on:
  push:
    branches: ['**']
    paths:
      - 'apps/react/**'
      - 'packages/**'
      - '.github/workflows/deploy-react.yml'
  workflow_dispatch:

jobs:
  #==============================================
  #==      PRODUCTION DEPLOYMENT (prod)      ==
  #==============================================
  deploy-prod:
    if: github.ref == 'refs/heads/prod' # 'prod' 브랜치에서만 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Type check
        run: pnpm --filter react check-types
      - name: Lint check
        run: pnpm --filter react lint
      - name: Build React app (Prod)
        run: pnpm --filter react build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_AMPLITUDE_API_KEY: ${{ secrets.VITE_AMPLITUDE_API_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
      - name: Configure AWS credentials (Prod)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy to S3 (Prod)
        run: |
          aws s3 sync apps/react/dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      - name: Invalidate CloudFront (Prod)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      - name: Build success
        run: |
          echo "React app build completed successfully (Production)"
          du -sh apps/react/dist/
      - name: Deployment success (Prod)
        run: |
          echo "React app successfully deployed to AWS (Production)"
      - name: Extract PR Title
        id: extract_pr_title
        run: |
          TITLE=$(echo "${{ github.event.head_commit.message }}" | tail -n 1)
          echo "pr_title=$TITLE" >> $GITHUB_OUTPUT
      - name: Send Discord Notification for Deployment Success (Prod)
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          embed-title: "🚀 운영(Prod) 배포 완료"
          embed-description: |
            **PR:** `${{ steps.extract_pr_title.outputs.pr_title }}`
            **실행자:** `${{ github.actor }}`
          embed-color: 8923138

  #==============================================
  #==    DEVELOPMENT DEPLOYMENT (dev)        ==
  #==============================================
  deploy-dev:
    if: github.ref == 'refs/heads/dev' # 'dev' 브랜치에서만 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Type check
        run: pnpm --filter react check-types
      - name: Lint check
        run: pnpm --filter react lint
      - name: Build React app (Dev)
        run: pnpm --filter react build
        env:
          VITE_API_URL: ${{ secrets.TEST_VITE_API_URL }}
          VITE_AMPLITUDE_API_KEY: ${{ secrets.VITE_AMPLITUDE_API_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
      - name: Configure AWS credentials (Dev)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy to S3 (Dev)
        run: |
          aws s3 sync apps/react/dist/ s3://${{ secrets.TEST_S3_BUCKET_NAME }} --delete
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      - name: Invalidate CloudFront (Dev)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.TEST_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      - name: Build success
        run: |
          echo "React app build completed successfully (Development)"
          du -sh apps/react/dist/
      - name: Deployment success (Dev)
        run: |
          echo "React app successfully deployed to AWS (Development)"
      - name: Extract PR Title
        id: extract_pr_title
        run: |
          TITLE=$(echo "${{ github.event.head_commit.message }}" | tail -n 1)
          echo "pr_title=$TITLE" >> $GITHUB_OUTPUT
      - name: Send Discord Notification for Deployment Success (Dev)
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          embed-title: "🧪 테스트(Dev) 배포 완료"
          embed-description: |
            **PR:** `${{ steps.extract_pr_title.outputs.pr_title }}`
            **실행자:** `${{ github.actor }}`
          embed-color: 5763719

  #=========================================================
  #==    RUN CHECKS FOR OTHER BRANCHES (non-deploy)     ==
  #=========================================================
  run-checks-other-branches:
    # prod, dev가 아닌 다른 모든 브랜치에서 실행
    if: github.ref != 'refs/heads/prod' && github.ref != 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # pnpm 설치
      - name: Install pnpm
        uses: pnpm/action-setup@v4

      # Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # 의존성 설치
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 타입 체크
      - name: Type check
        run: pnpm --filter react check-types

      # Lint 체크
      - name: Lint check
        run: pnpm --filter react lint

      # 체크 완료 알림
      - name: Checks completed
        run: |
          echo "Type and Lint checks passed for branch ${{ github.ref_name }}"
