/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as authLayoutImport } from './app/(auth)/layout'
import { Route as appLayoutImport } from './app/(app)/layout'
import { Route as PageImport } from './app/page'
import { Route as authAuthImport } from './app/(auth)/auth'
import { Route as appSystemPageImport } from './app/(app)/system/page'
import { Route as appSystemAdministratorsPageImport } from './app/(app)/system/administrators/page'

// Create/Update Routes

const authLayoutRoute = authLayoutImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const appLayoutRoute = appLayoutImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const PageRoute = PageImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => authLayoutRoute,
} as any)

const appSystemPageRoute = appSystemPageImport.update({
  id: '/system/',
  path: '/system/',
  getParentRoute: () => appLayoutRoute,
} as any)

const appSystemAdministratorsPageRoute =
  appSystemAdministratorsPageImport.update({
    id: '/system/administrators/',
    path: '/system/administrators/',
    getParentRoute: () => appLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PageImport
      parentRoute: typeof rootRoute
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/auth': {
      id: '/(auth)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authLayoutImport
    }
    '/(app)/system/': {
      id: '/(app)/system/'
      path: '/system'
      fullPath: '/system'
      preLoaderRoute: typeof appSystemPageImport
      parentRoute: typeof appLayoutImport
    }
    '/(app)/system/administrators/': {
      id: '/(app)/system/administrators/'
      path: '/system/administrators'
      fullPath: '/system/administrators'
      preLoaderRoute: typeof appSystemAdministratorsPageImport
      parentRoute: typeof appLayoutImport
    }
  }
}

// Create and export the route tree

interface appLayoutRouteChildren {
  appSystemPageRoute: typeof appSystemPageRoute
  appSystemAdministratorsPageRoute: typeof appSystemAdministratorsPageRoute
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appSystemPageRoute: appSystemPageRoute,
  appSystemAdministratorsPageRoute: appSystemAdministratorsPageRoute,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface authLayoutRouteChildren {
  authAuthRoute: typeof authAuthRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authAuthRoute: authAuthRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof authLayoutRouteWithChildren
  '/auth': typeof authAuthRoute
  '/system': typeof appSystemPageRoute
  '/system/administrators': typeof appSystemAdministratorsPageRoute
}

export interface FileRoutesByTo {
  '/': typeof authLayoutRouteWithChildren
  '/auth': typeof authAuthRoute
  '/system': typeof appSystemPageRoute
  '/system/administrators': typeof appSystemAdministratorsPageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof PageRoute
  '/(app)': typeof appLayoutRouteWithChildren
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(auth)/auth': typeof authAuthRoute
  '/(app)/system/': typeof appSystemPageRoute
  '/(app)/system/administrators/': typeof appSystemAdministratorsPageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/system' | '/system/administrators'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/system' | '/system/administrators'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(auth)'
    | '/(auth)/auth'
    | '/(app)/system/'
    | '/(app)/system/administrators/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PageRoute: typeof PageRoute
  appLayoutRoute: typeof appLayoutRouteWithChildren
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PageRoute: PageRoute,
  appLayoutRoute: appLayoutRouteWithChildren,
  authLayoutRoute: authLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)",
        "/(auth)"
      ]
    },
    "/": {
      "filePath": "page.tsx"
    },
    "/(app)": {
      "filePath": "(app)/layout.tsx",
      "children": [
        "/(app)/system/",
        "/(app)/system/administrators/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/layout.tsx",
      "children": [
        "/(auth)/auth"
      ]
    },
    "/(auth)/auth": {
      "filePath": "(auth)/auth.tsx",
      "parent": "/(auth)"
    },
    "/(app)/system/": {
      "filePath": "(app)/system/page.tsx",
      "parent": "/(app)"
    },
    "/(app)/system/administrators/": {
      "filePath": "(app)/system/administrators/page.tsx",
      "parent": "/(app)"
    }
  }
}
ROUTE_MANIFEST_END */
