/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as PageImport } from './app/page'
import { Route as MypagePageImport } from './app/mypage/page'
import { Route as MapPageImport } from './app/map/page'
import { Route as ChatPageImport } from './app/chat/page'
import { Route as CameraPageImport } from './app/camera/page'
import { Route as authRegisterPageImport } from './app/(auth)/register/page'
import { Route as authAuthPageImport } from './app/(auth)/auth/page'

// Create/Update Routes

const PageRoute = PageImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MypagePageRoute = MypagePageImport.update({
  id: '/mypage/',
  path: '/mypage/',
  getParentRoute: () => rootRoute,
} as any)

const MapPageRoute = MapPageImport.update({
  id: '/map/',
  path: '/map/',
  getParentRoute: () => rootRoute,
} as any)

const ChatPageRoute = ChatPageImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRoute,
} as any)

const CameraPageRoute = CameraPageImport.update({
  id: '/camera/',
  path: '/camera/',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterPageRoute = authRegisterPageImport.update({
  id: '/(auth)/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const authAuthPageRoute = authAuthPageImport.update({
  id: '/(auth)/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PageImport
      parentRoute: typeof rootRoute
    }
    '/camera/': {
      id: '/camera/'
      path: '/camera'
      fullPath: '/camera'
      preLoaderRoute: typeof CameraPageImport
      parentRoute: typeof rootRoute
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatPageImport
      parentRoute: typeof rootRoute
    }
    '/map/': {
      id: '/map/'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapPageImport
      parentRoute: typeof rootRoute
    }
    '/mypage/': {
      id: '/mypage/'
      path: '/mypage'
      fullPath: '/mypage'
      preLoaderRoute: typeof MypagePageImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/auth/': {
      id: '/(auth)/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authAuthPageImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterPageImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof PageRoute
  '/camera': typeof CameraPageRoute
  '/chat': typeof ChatPageRoute
  '/map': typeof MapPageRoute
  '/mypage': typeof MypagePageRoute
  '/auth': typeof authAuthPageRoute
  '/register': typeof authRegisterPageRoute
}

export interface FileRoutesByTo {
  '/': typeof PageRoute
  '/camera': typeof CameraPageRoute
  '/chat': typeof ChatPageRoute
  '/map': typeof MapPageRoute
  '/mypage': typeof MypagePageRoute
  '/auth': typeof authAuthPageRoute
  '/register': typeof authRegisterPageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof PageRoute
  '/camera/': typeof CameraPageRoute
  '/chat/': typeof ChatPageRoute
  '/map/': typeof MapPageRoute
  '/mypage/': typeof MypagePageRoute
  '/(auth)/auth/': typeof authAuthPageRoute
  '/(auth)/register/': typeof authRegisterPageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/camera'
    | '/chat'
    | '/map'
    | '/mypage'
    | '/auth'
    | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/camera' | '/chat' | '/map' | '/mypage' | '/auth' | '/register'
  id:
    | '__root__'
    | '/'
    | '/camera/'
    | '/chat/'
    | '/map/'
    | '/mypage/'
    | '/(auth)/auth/'
    | '/(auth)/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PageRoute: typeof PageRoute
  CameraPageRoute: typeof CameraPageRoute
  ChatPageRoute: typeof ChatPageRoute
  MapPageRoute: typeof MapPageRoute
  MypagePageRoute: typeof MypagePageRoute
  authAuthPageRoute: typeof authAuthPageRoute
  authRegisterPageRoute: typeof authRegisterPageRoute
}

const rootRouteChildren: RootRouteChildren = {
  PageRoute: PageRoute,
  CameraPageRoute: CameraPageRoute,
  ChatPageRoute: ChatPageRoute,
  MapPageRoute: MapPageRoute,
  MypagePageRoute: MypagePageRoute,
  authAuthPageRoute: authAuthPageRoute,
  authRegisterPageRoute: authRegisterPageRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/camera/",
        "/chat/",
        "/map/",
        "/mypage/",
        "/(auth)/auth/",
        "/(auth)/register/"
      ]
    },
    "/": {
      "filePath": "page.tsx"
    },
    "/camera/": {
      "filePath": "camera/page.tsx"
    },
    "/chat/": {
      "filePath": "chat/page.tsx"
    },
    "/map/": {
      "filePath": "map/page.tsx"
    },
    "/mypage/": {
      "filePath": "mypage/page.tsx"
    },
    "/(auth)/auth/": {
      "filePath": "(auth)/auth/page.tsx"
    },
    "/(auth)/register/": {
      "filePath": "(auth)/register/page.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
