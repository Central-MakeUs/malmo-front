/* tslint:disable */
/* eslint-disable */
/**
 * admin-api 관리자 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { GetAdministratorResDto } from '../models'
// @ts-ignore
import type { GetAdministratorsResDto } from '../models'
// @ts-ignore
import type { IdParamsDto } from '../models'
// @ts-ignore
import type { PatchAdministratorReqDto } from '../models'
// @ts-ignore
import type { PostAdministratorReqDto } from '../models'
/**
 * AdministersApi - axios parameter creator
 * @export
 */
export const AdministersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 관리자 생성
     * @param {PostAdministratorReqDto} postAdministratorReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerCreate: async (
      postAdministratorReqDto: PostAdministratorReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAdministratorReqDto' is not null or undefined
      assertParamExists('administratorsControllerCreate', 'postAdministratorReqDto', postAdministratorReqDto)
      const localVarPath = `/admin/administrators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookie required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAdministratorReqDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 관리자 삭제
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('administratorsControllerDelete', 'id', id)
      const localVarPath = `/admin/administrators/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookie required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 관리자 리스트 조회
     * @param {number} start
     * @param {number} perPage
     * @param {string} [search]
     * @param {number} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerFindAll: async (
      start: number,
      perPage: number,
      search?: string,
      groupId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'start' is not null or undefined
      assertParamExists('administratorsControllerFindAll', 'start', start)
      // verify required parameter 'perPage' is not null or undefined
      assertParamExists('administratorsControllerFindAll', 'perPage', perPage)
      const localVarPath = `/admin/administrators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookie required

      if (search !== undefined) {
        localVarQueryParameter['search'] = search
      }

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId
      }

      if (start !== undefined) {
        localVarQueryParameter['start'] = start
      }

      if (perPage !== undefined) {
        localVarQueryParameter['perPage'] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 관리자 리스트 상세 조회
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('administratorsControllerFindOne', 'id', id)
      const localVarPath = `/admin/administrators/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookie required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 관리자 수정
     * @param {number} id
     * @param {PatchAdministratorReqDto} patchAdministratorReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerUpdate: async (
      id: number,
      patchAdministratorReqDto: PatchAdministratorReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('administratorsControllerUpdate', 'id', id)
      // verify required parameter 'patchAdministratorReqDto' is not null or undefined
      assertParamExists('administratorsControllerUpdate', 'patchAdministratorReqDto', patchAdministratorReqDto)
      const localVarPath = `/admin/administrators/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookie required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchAdministratorReqDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdministersApi - functional programming interface
 * @export
 */
export const AdministersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdministersApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 관리자 생성
     * @param {PostAdministratorReqDto} postAdministratorReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async administratorsControllerCreate(
      postAdministratorReqDto: PostAdministratorReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdParamsDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.administratorsControllerCreate(
        postAdministratorReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdministersApi.administratorsControllerCreate']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 관리자 삭제
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async administratorsControllerDelete(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.administratorsControllerDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdministersApi.administratorsControllerDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 관리자 리스트 조회
     * @param {number} start
     * @param {number} perPage
     * @param {string} [search]
     * @param {number} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async administratorsControllerFindAll(
      start: number,
      perPage: number,
      search?: string,
      groupId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdministratorsResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.administratorsControllerFindAll(
        start,
        perPage,
        search,
        groupId,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdministersApi.administratorsControllerFindAll']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 관리자 리스트 상세 조회
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async administratorsControllerFindOne(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdministratorResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.administratorsControllerFindOne(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdministersApi.administratorsControllerFindOne']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 관리자 수정
     * @param {number} id
     * @param {PatchAdministratorReqDto} patchAdministratorReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async administratorsControllerUpdate(
      id: number,
      patchAdministratorReqDto: PatchAdministratorReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdParamsDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.administratorsControllerUpdate(
        id,
        patchAdministratorReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdministersApi.administratorsControllerUpdate']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AdministersApi - factory interface
 * @export
 */
export const AdministersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdministersApiFp(configuration)
  return {
    /**
     *
     * @summary 관리자 생성
     * @param {AdministersApiAdministratorsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerCreate(
      requestParameters: AdministersApiAdministratorsControllerCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<IdParamsDto> {
      return localVarFp
        .administratorsControllerCreate(requestParameters.postAdministratorReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 관리자 삭제
     * @param {AdministersApiAdministratorsControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerDelete(
      requestParameters: AdministersApiAdministratorsControllerDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .administratorsControllerDelete(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 관리자 리스트 조회
     * @param {AdministersApiAdministratorsControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerFindAll(
      requestParameters: AdministersApiAdministratorsControllerFindAllRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAdministratorsResDto> {
      return localVarFp
        .administratorsControllerFindAll(
          requestParameters.start,
          requestParameters.perPage,
          requestParameters.search,
          requestParameters.groupId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 관리자 리스트 상세 조회
     * @param {AdministersApiAdministratorsControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerFindOne(
      requestParameters: AdministersApiAdministratorsControllerFindOneRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAdministratorResDto> {
      return localVarFp
        .administratorsControllerFindOne(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 관리자 수정
     * @param {AdministersApiAdministratorsControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    administratorsControllerUpdate(
      requestParameters: AdministersApiAdministratorsControllerUpdateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<IdParamsDto> {
      return localVarFp
        .administratorsControllerUpdate(requestParameters.id, requestParameters.patchAdministratorReqDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for administratorsControllerCreate operation in AdministersApi.
 * @export
 * @interface AdministersApiAdministratorsControllerCreateRequest
 */
export interface AdministersApiAdministratorsControllerCreateRequest {
  /**
   *
   * @type {PostAdministratorReqDto}
   * @memberof AdministersApiAdministratorsControllerCreate
   */
  readonly postAdministratorReqDto: PostAdministratorReqDto
}

/**
 * Request parameters for administratorsControllerDelete operation in AdministersApi.
 * @export
 * @interface AdministersApiAdministratorsControllerDeleteRequest
 */
export interface AdministersApiAdministratorsControllerDeleteRequest {
  /**
   *
   * @type {number}
   * @memberof AdministersApiAdministratorsControllerDelete
   */
  readonly id: number
}

/**
 * Request parameters for administratorsControllerFindAll operation in AdministersApi.
 * @export
 * @interface AdministersApiAdministratorsControllerFindAllRequest
 */
export interface AdministersApiAdministratorsControllerFindAllRequest {
  /**
   *
   * @type {number}
   * @memberof AdministersApiAdministratorsControllerFindAll
   */
  readonly start: number

  /**
   *
   * @type {number}
   * @memberof AdministersApiAdministratorsControllerFindAll
   */
  readonly perPage: number

  /**
   *
   * @type {string}
   * @memberof AdministersApiAdministratorsControllerFindAll
   */
  readonly search?: string

  /**
   *
   * @type {number}
   * @memberof AdministersApiAdministratorsControllerFindAll
   */
  readonly groupId?: number
}

/**
 * Request parameters for administratorsControllerFindOne operation in AdministersApi.
 * @export
 * @interface AdministersApiAdministratorsControllerFindOneRequest
 */
export interface AdministersApiAdministratorsControllerFindOneRequest {
  /**
   *
   * @type {number}
   * @memberof AdministersApiAdministratorsControllerFindOne
   */
  readonly id: number
}

/**
 * Request parameters for administratorsControllerUpdate operation in AdministersApi.
 * @export
 * @interface AdministersApiAdministratorsControllerUpdateRequest
 */
export interface AdministersApiAdministratorsControllerUpdateRequest {
  /**
   *
   * @type {number}
   * @memberof AdministersApiAdministratorsControllerUpdate
   */
  readonly id: number

  /**
   *
   * @type {PatchAdministratorReqDto}
   * @memberof AdministersApiAdministratorsControllerUpdate
   */
  readonly patchAdministratorReqDto: PatchAdministratorReqDto
}

/**
 * AdministersApi - object-oriented interface
 * @export
 * @class AdministersApi
 * @extends {BaseAPI}
 */
export class AdministersApi extends BaseAPI {
  /**
   *
   * @summary 관리자 생성
   * @param {AdministersApiAdministratorsControllerCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministersApi
   */
  public administratorsControllerCreate(
    requestParameters: AdministersApiAdministratorsControllerCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AdministersApiFp(this.configuration)
      .administratorsControllerCreate(requestParameters.postAdministratorReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 관리자 삭제
   * @param {AdministersApiAdministratorsControllerDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministersApi
   */
  public administratorsControllerDelete(
    requestParameters: AdministersApiAdministratorsControllerDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AdministersApiFp(this.configuration)
      .administratorsControllerDelete(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 관리자 리스트 조회
   * @param {AdministersApiAdministratorsControllerFindAllRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministersApi
   */
  public administratorsControllerFindAll(
    requestParameters: AdministersApiAdministratorsControllerFindAllRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AdministersApiFp(this.configuration)
      .administratorsControllerFindAll(
        requestParameters.start,
        requestParameters.perPage,
        requestParameters.search,
        requestParameters.groupId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 관리자 리스트 상세 조회
   * @param {AdministersApiAdministratorsControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministersApi
   */
  public administratorsControllerFindOne(
    requestParameters: AdministersApiAdministratorsControllerFindOneRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AdministersApiFp(this.configuration)
      .administratorsControllerFindOne(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 관리자 수정
   * @param {AdministersApiAdministratorsControllerUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministersApi
   */
  public administratorsControllerUpdate(
    requestParameters: AdministersApiAdministratorsControllerUpdateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AdministersApiFp(this.configuration)
      .administratorsControllerUpdate(requestParameters.id, requestParameters.patchAdministratorReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
