/* tslint:disable */
/* eslint-disable */
/**
 * admin-api 관리자 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { GetAuthResDto } from '../models'
// @ts-ignore
import type { PostAuthReqDto } from '../models'
// @ts-ignore
import type { PostAuthResDto } from '../models'
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 로그인 세션 확인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetAuth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookie required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 관리자 로그인
     * @param {PostAuthReqDto} postAuthReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostAuth: async (
      postAuthReqDto: PostAuthReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAuthReqDto' is not null or undefined
      assertParamExists('authControllerPostAuth', 'postAuthReqDto', postAuthReqDto)
      const localVarPath = `/admin/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(postAuthReqDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostRefresh: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/auth/refresh-token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 로그인 세션 확인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerGetAuth(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetAuth(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerGetAuth']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerLogout(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerLogout']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 관리자 로그인
     * @param {PostAuthReqDto} postAuthReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerPostAuth(
      postAuthReqDto: PostAuthReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerPostAuth(postAuthReqDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerPostAuth']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerPostRefresh(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerPostRefresh(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerPostRefresh']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary 로그인 세션 확인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetAuth(options?: RawAxiosRequestConfig): AxiosPromise<GetAuthResDto> {
      return localVarFp.authControllerGetAuth(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 관리자 로그인
     * @param {AuthApiAuthControllerPostAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostAuth(
      requestParameters: AuthApiAuthControllerPostAuthRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthResDto> {
      return localVarFp
        .authControllerPostAuth(requestParameters.postAuthReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostRefresh(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.authControllerPostRefresh(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for authControllerPostAuth operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerPostAuthRequest
 */
export interface AuthApiAuthControllerPostAuthRequest {
  /**
   *
   * @type {PostAuthReqDto}
   * @memberof AuthApiAuthControllerPostAuth
   */
  readonly postAuthReqDto: PostAuthReqDto
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary 로그인 세션 확인
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerGetAuth(options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authControllerGetAuth(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 로그아웃
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerLogout(options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authControllerLogout(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 관리자 로그인
   * @param {AuthApiAuthControllerPostAuthRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerPostAuth(
    requestParameters: AuthApiAuthControllerPostAuthRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerPostAuth(requestParameters.postAuthReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Refresh Token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerPostRefresh(options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authControllerPostRefresh(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
