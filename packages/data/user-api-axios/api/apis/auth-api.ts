/* tslint:disable */
/* eslint-disable */
/**
 * care1-api 사용자 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { GetAuthResDto } from '../models'
// @ts-ignore
import type { PostAuthBusinessUserRegisterReqDto } from '../models'
// @ts-ignore
import type { PostAuthFindAccountIdReqDto } from '../models'
// @ts-ignore
import type { PostAuthFindAccountIdResDto } from '../models'
// @ts-ignore
import type { PostAuthRefreshReqDto } from '../models'
// @ts-ignore
import type { PostAuthReqDto } from '../models'
// @ts-ignore
import type { PostAuthResDto } from '../models'
// @ts-ignore
import type { PostAuthResetPasswordReqDto } from '../models'
// @ts-ignore
import type { PostAuthUserRegisterReqDto } from '../models'
// @ts-ignore
import type { PutAuthReqDto } from '../models'
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 아이디 찾기
     * @param {PostAuthFindAccountIdReqDto} postAuthFindAccountIdReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerFindAccountId: async (
      postAuthFindAccountIdReqDto: PostAuthFindAccountIdReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAuthFindAccountIdReqDto' is not null or undefined
      assertParamExists('authControllerFindAccountId', 'postAuthFindAccountIdReqDto', postAuthFindAccountIdReqDto)
      const localVarPath = `/auth/find-accountId`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAuthFindAccountIdReqDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 로그인 세션 확인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetAuth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 로그아웃
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout: async (refreshToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (refreshToken !== undefined) {
        localVarQueryParameter['refreshToken'] = refreshToken
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 로그인
     * @param {PostAuthReqDto} postAuthReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostAuth: async (
      postAuthReqDto: PostAuthReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAuthReqDto' is not null or undefined
      assertParamExists('authControllerPostAuth', 'postAuthReqDto', postAuthReqDto)
      const localVarPath = `/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(postAuthReqDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 기업 회원 회원가입
     * @param {PostAuthBusinessUserRegisterReqDto} postAuthBusinessUserRegisterReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostBusinessRegister: async (
      postAuthBusinessUserRegisterReqDto: PostAuthBusinessUserRegisterReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAuthBusinessUserRegisterReqDto' is not null or undefined
      assertParamExists(
        'authControllerPostBusinessRegister',
        'postAuthBusinessUserRegisterReqDto',
        postAuthBusinessUserRegisterReqDto
      )
      const localVarPath = `/auth/register/business`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAuthBusinessUserRegisterReqDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Refresh Token
     * @param {PostAuthRefreshReqDto} postAuthRefreshReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostRefresh: async (
      postAuthRefreshReqDto: PostAuthRefreshReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAuthRefreshReqDto' is not null or undefined
      assertParamExists('authControllerPostRefresh', 'postAuthRefreshReqDto', postAuthRefreshReqDto)
      const localVarPath = `/auth/refresh-token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(postAuthRefreshReqDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 일반 회원 회원가입
     * @param {PostAuthUserRegisterReqDto} postAuthUserRegisterReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostUserRegister: async (
      postAuthUserRegisterReqDto: PostAuthUserRegisterReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAuthUserRegisterReqDto' is not null or undefined
      assertParamExists('authControllerPostUserRegister', 'postAuthUserRegisterReqDto', postAuthUserRegisterReqDto)
      const localVarPath = `/auth/register/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAuthUserRegisterReqDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 패스워드 변경
     * @param {PutAuthReqDto} putAuthReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPutAuth: async (
      putAuthReqDto: PutAuthReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'putAuthReqDto' is not null or undefined
      assertParamExists('authControllerPutAuth', 'putAuthReqDto', putAuthReqDto)
      const localVarPath = `/auth`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(putAuthReqDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * accounts에 email이 있을 경우에만 비밀번호 재설정 가능.
     * @summary 비밀번호 재설정
     * @param {PostAuthResetPasswordReqDto} postAuthResetPasswordReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResetPassword: async (
      postAuthResetPasswordReqDto: PostAuthResetPasswordReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAuthResetPasswordReqDto' is not null or undefined
      assertParamExists('authControllerResetPassword', 'postAuthResetPasswordReqDto', postAuthResetPasswordReqDto)
      const localVarPath = `/auth/reset-password`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAuthResetPasswordReqDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 아이디 찾기
     * @param {PostAuthFindAccountIdReqDto} postAuthFindAccountIdReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerFindAccountId(
      postAuthFindAccountIdReqDto: PostAuthFindAccountIdReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthFindAccountIdResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerFindAccountId(
        postAuthFindAccountIdReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerFindAccountId']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 로그인 세션 확인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerGetAuth(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetAuth(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerGetAuth']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 로그아웃
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerLogout(
      refreshToken?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(refreshToken, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerLogout']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 로그인
     * @param {PostAuthReqDto} postAuthReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerPostAuth(
      postAuthReqDto: PostAuthReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerPostAuth(postAuthReqDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerPostAuth']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 기업 회원 회원가입
     * @param {PostAuthBusinessUserRegisterReqDto} postAuthBusinessUserRegisterReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerPostBusinessRegister(
      postAuthBusinessUserRegisterReqDto: PostAuthBusinessUserRegisterReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerPostBusinessRegister(
        postAuthBusinessUserRegisterReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerPostBusinessRegister']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Refresh Token
     * @param {PostAuthRefreshReqDto} postAuthRefreshReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerPostRefresh(
      postAuthRefreshReqDto: PostAuthRefreshReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerPostRefresh(
        postAuthRefreshReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerPostRefresh']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 일반 회원 회원가입
     * @param {PostAuthUserRegisterReqDto} postAuthUserRegisterReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerPostUserRegister(
      postAuthUserRegisterReqDto: PostAuthUserRegisterReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerPostUserRegister(
        postAuthUserRegisterReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerPostUserRegister']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 패스워드 변경
     * @param {PutAuthReqDto} putAuthReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerPutAuth(
      putAuthReqDto: PutAuthReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerPutAuth(putAuthReqDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerPutAuth']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * accounts에 email이 있을 경우에만 비밀번호 재설정 가능.
     * @summary 비밀번호 재설정
     * @param {PostAuthResetPasswordReqDto} postAuthResetPasswordReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerResetPassword(
      postAuthResetPasswordReqDto: PostAuthResetPasswordReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResetPasswordReqDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPassword(
        postAuthResetPasswordReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerResetPassword']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary 아이디 찾기
     * @param {AuthApiAuthControllerFindAccountIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerFindAccountId(
      requestParameters: AuthApiAuthControllerFindAccountIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthFindAccountIdResDto> {
      return localVarFp
        .authControllerFindAccountId(requestParameters.postAuthFindAccountIdReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 로그인 세션 확인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetAuth(options?: RawAxiosRequestConfig): AxiosPromise<GetAuthResDto> {
      return localVarFp.authControllerGetAuth(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 로그아웃
     * @param {AuthApiAuthControllerLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout(
      requestParameters: AuthApiAuthControllerLogoutRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .authControllerLogout(requestParameters.refreshToken, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 로그인
     * @param {AuthApiAuthControllerPostAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostAuth(
      requestParameters: AuthApiAuthControllerPostAuthRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthResDto> {
      return localVarFp
        .authControllerPostAuth(requestParameters.postAuthReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 기업 회원 회원가입
     * @param {AuthApiAuthControllerPostBusinessRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostBusinessRegister(
      requestParameters: AuthApiAuthControllerPostBusinessRegisterRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthResDto> {
      return localVarFp
        .authControllerPostBusinessRegister(requestParameters.postAuthBusinessUserRegisterReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Refresh Token
     * @param {AuthApiAuthControllerPostRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostRefresh(
      requestParameters: AuthApiAuthControllerPostRefreshRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthResDto> {
      return localVarFp
        .authControllerPostRefresh(requestParameters.postAuthRefreshReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 일반 회원 회원가입
     * @param {AuthApiAuthControllerPostUserRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPostUserRegister(
      requestParameters: AuthApiAuthControllerPostUserRegisterRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthResDto> {
      return localVarFp
        .authControllerPostUserRegister(requestParameters.postAuthUserRegisterReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 패스워드 변경
     * @param {AuthApiAuthControllerPutAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerPutAuth(
      requestParameters: AuthApiAuthControllerPutAuthRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthResDto> {
      return localVarFp
        .authControllerPutAuth(requestParameters.putAuthReqDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * accounts에 email이 있을 경우에만 비밀번호 재설정 가능.
     * @summary 비밀번호 재설정
     * @param {AuthApiAuthControllerResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResetPassword(
      requestParameters: AuthApiAuthControllerResetPasswordRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostAuthResetPasswordReqDto> {
      return localVarFp
        .authControllerResetPassword(requestParameters.postAuthResetPasswordReqDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for authControllerFindAccountId operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerFindAccountIdRequest
 */
export interface AuthApiAuthControllerFindAccountIdRequest {
  /**
   *
   * @type {PostAuthFindAccountIdReqDto}
   * @memberof AuthApiAuthControllerFindAccountId
   */
  readonly postAuthFindAccountIdReqDto: PostAuthFindAccountIdReqDto
}

/**
 * Request parameters for authControllerLogout operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLogoutRequest
 */
export interface AuthApiAuthControllerLogoutRequest {
  /**
   *
   * @type {string}
   * @memberof AuthApiAuthControllerLogout
   */
  readonly refreshToken?: string
}

/**
 * Request parameters for authControllerPostAuth operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerPostAuthRequest
 */
export interface AuthApiAuthControllerPostAuthRequest {
  /**
   *
   * @type {PostAuthReqDto}
   * @memberof AuthApiAuthControllerPostAuth
   */
  readonly postAuthReqDto: PostAuthReqDto
}

/**
 * Request parameters for authControllerPostBusinessRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerPostBusinessRegisterRequest
 */
export interface AuthApiAuthControllerPostBusinessRegisterRequest {
  /**
   *
   * @type {PostAuthBusinessUserRegisterReqDto}
   * @memberof AuthApiAuthControllerPostBusinessRegister
   */
  readonly postAuthBusinessUserRegisterReqDto: PostAuthBusinessUserRegisterReqDto
}

/**
 * Request parameters for authControllerPostRefresh operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerPostRefreshRequest
 */
export interface AuthApiAuthControllerPostRefreshRequest {
  /**
   *
   * @type {PostAuthRefreshReqDto}
   * @memberof AuthApiAuthControllerPostRefresh
   */
  readonly postAuthRefreshReqDto: PostAuthRefreshReqDto
}

/**
 * Request parameters for authControllerPostUserRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerPostUserRegisterRequest
 */
export interface AuthApiAuthControllerPostUserRegisterRequest {
  /**
   *
   * @type {PostAuthUserRegisterReqDto}
   * @memberof AuthApiAuthControllerPostUserRegister
   */
  readonly postAuthUserRegisterReqDto: PostAuthUserRegisterReqDto
}

/**
 * Request parameters for authControllerPutAuth operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerPutAuthRequest
 */
export interface AuthApiAuthControllerPutAuthRequest {
  /**
   *
   * @type {PutAuthReqDto}
   * @memberof AuthApiAuthControllerPutAuth
   */
  readonly putAuthReqDto: PutAuthReqDto
}

/**
 * Request parameters for authControllerResetPassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerResetPasswordRequest
 */
export interface AuthApiAuthControllerResetPasswordRequest {
  /**
   *
   * @type {PostAuthResetPasswordReqDto}
   * @memberof AuthApiAuthControllerResetPassword
   */
  readonly postAuthResetPasswordReqDto: PostAuthResetPasswordReqDto
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary 아이디 찾기
   * @param {AuthApiAuthControllerFindAccountIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerFindAccountId(
    requestParameters: AuthApiAuthControllerFindAccountIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerFindAccountId(requestParameters.postAuthFindAccountIdReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 로그인 세션 확인
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerGetAuth(options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authControllerGetAuth(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 로그아웃
   * @param {AuthApiAuthControllerLogoutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerLogout(
    requestParameters: AuthApiAuthControllerLogoutRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerLogout(requestParameters.refreshToken, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 로그인
   * @param {AuthApiAuthControllerPostAuthRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerPostAuth(
    requestParameters: AuthApiAuthControllerPostAuthRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerPostAuth(requestParameters.postAuthReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 기업 회원 회원가입
   * @param {AuthApiAuthControllerPostBusinessRegisterRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerPostBusinessRegister(
    requestParameters: AuthApiAuthControllerPostBusinessRegisterRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerPostBusinessRegister(requestParameters.postAuthBusinessUserRegisterReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Refresh Token
   * @param {AuthApiAuthControllerPostRefreshRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerPostRefresh(
    requestParameters: AuthApiAuthControllerPostRefreshRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerPostRefresh(requestParameters.postAuthRefreshReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 일반 회원 회원가입
   * @param {AuthApiAuthControllerPostUserRegisterRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerPostUserRegister(
    requestParameters: AuthApiAuthControllerPostUserRegisterRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerPostUserRegister(requestParameters.postAuthUserRegisterReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 패스워드 변경
   * @param {AuthApiAuthControllerPutAuthRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerPutAuth(
    requestParameters: AuthApiAuthControllerPutAuthRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerPutAuth(requestParameters.putAuthReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * accounts에 email이 있을 경우에만 비밀번호 재설정 가능.
   * @summary 비밀번호 재설정
   * @param {AuthApiAuthControllerResetPasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerResetPassword(
    requestParameters: AuthApiAuthControllerResetPasswordRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerResetPassword(requestParameters.postAuthResetPasswordReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
