/* tslint:disable */
/* eslint-disable */
/**
 * Malmo API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { AppleLoginRequestDto } from '../models'
// @ts-ignore
import type { KakaoLoginRequestDto } from '../models'
// @ts-ignore
import type { LoginSuccessResponse } from '../models'
// @ts-ignore
import type { SwaggerErrorResponse } from '../models'
/**
 * LoginsApi - axios parameter creator
 * @export
 */
export const LoginsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 애플 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
     * @summary 애플 소셜 로그인
     * @param {AppleLoginRequestDto} appleLoginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithApple: async (
      appleLoginRequestDto: AppleLoginRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'appleLoginRequestDto' is not null or undefined
      assertParamExists('loginWithApple', 'appleLoginRequestDto', appleLoginRequestDto)
      const localVarPath = `/login/apple`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(appleLoginRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 카카오 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
     * @summary 카카오 소셜 로그인
     * @param {KakaoLoginRequestDto} kakaoLoginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithKakao: async (
      kakaoLoginRequestDto: KakaoLoginRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'kakaoLoginRequestDto' is not null or undefined
      assertParamExists('loginWithKakao', 'kakaoLoginRequestDto', kakaoLoginRequestDto)
      const localVarPath = `/login/kakao`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(kakaoLoginRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LoginsApi - functional programming interface
 * @export
 */
export const LoginsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoginsApiAxiosParamCreator(configuration)
  return {
    /**
     * 애플 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
     * @summary 애플 소셜 로그인
     * @param {AppleLoginRequestDto} appleLoginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginWithApple(
      appleLoginRequestDto: AppleLoginRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithApple(appleLoginRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LoginsApi.loginWithApple']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 카카오 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
     * @summary 카카오 소셜 로그인
     * @param {KakaoLoginRequestDto} kakaoLoginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginWithKakao(
      kakaoLoginRequestDto: KakaoLoginRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithKakao(kakaoLoginRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LoginsApi.loginWithKakao']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * LoginsApi - factory interface
 * @export
 */
export const LoginsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = LoginsApiFp(configuration)
  return {
    /**
     * 애플 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
     * @summary 애플 소셜 로그인
     * @param {LoginsApiLoginWithAppleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithApple(
      requestParameters: LoginsApiLoginWithAppleRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LoginSuccessResponse> {
      return localVarFp
        .loginWithApple(requestParameters.appleLoginRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 카카오 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
     * @summary 카카오 소셜 로그인
     * @param {LoginsApiLoginWithKakaoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithKakao(
      requestParameters: LoginsApiLoginWithKakaoRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LoginSuccessResponse> {
      return localVarFp
        .loginWithKakao(requestParameters.kakaoLoginRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for loginWithApple operation in LoginsApi.
 * @export
 * @interface LoginsApiLoginWithAppleRequest
 */
export interface LoginsApiLoginWithAppleRequest {
  /**
   *
   * @type {AppleLoginRequestDto}
   * @memberof LoginsApiLoginWithApple
   */
  readonly appleLoginRequestDto: AppleLoginRequestDto
}

/**
 * Request parameters for loginWithKakao operation in LoginsApi.
 * @export
 * @interface LoginsApiLoginWithKakaoRequest
 */
export interface LoginsApiLoginWithKakaoRequest {
  /**
   *
   * @type {KakaoLoginRequestDto}
   * @memberof LoginsApiLoginWithKakao
   */
  readonly kakaoLoginRequestDto: KakaoLoginRequestDto
}

/**
 * LoginsApi - object-oriented interface
 * @export
 * @class LoginsApi
 * @extends {BaseAPI}
 */
export class LoginsApi extends BaseAPI {
  /**
   * 애플 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
   * @summary 애플 소셜 로그인
   * @param {LoginsApiLoginWithAppleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginsApi
   */
  public loginWithApple(requestParameters: LoginsApiLoginWithAppleRequest, options?: RawAxiosRequestConfig) {
    return LoginsApiFp(this.configuration)
      .loginWithApple(requestParameters.appleLoginRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 카카오 OIDC ID 토큰을 통해 로그인합니다. 신규 사용자의 경우 자동으로 회원가입이 진행됩니다.
   * @summary 카카오 소셜 로그인
   * @param {LoginsApiLoginWithKakaoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginsApi
   */
  public loginWithKakao(requestParameters: LoginsApiLoginWithKakaoRequest, options?: RawAxiosRequestConfig) {
    return LoginsApiFp(this.configuration)
      .loginWithKakao(requestParameters.kakaoLoginRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
