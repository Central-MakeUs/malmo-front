/* tslint:disable */
/* eslint-disable */
/**
 * Malmo API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { GetLoveTypeSuccessResponse } from '../models'
// @ts-ignore
import type { RegisterLoveTypeRequestDto } from '../models'
// @ts-ignore
import type { RegisterLoveTypeSuccessResponse } from '../models'
// @ts-ignore
import type { SwaggerErrorResponse } from '../models'
/**
 * LoveTypesApi - axios parameter creator
 * @export
 */
export const LoveTypesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 애착 유형의 내용을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 애착 유형 조회
     * @param {string} loveType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoveType: async (loveType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'loveType' is not null or undefined
      assertParamExists('getLoveType', 'loveType', loveType)
      const localVarPath = `/love-types/{loveType}`.replace(`{${'loveType'}}`, encodeURIComponent(String(loveType)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 애착 유형 검사의 결과를 등록합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 애착 유형 검사 결과 등록
     * @param {RegisterLoveTypeRequestDto} registerLoveTypeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerLoveType: async (
      registerLoveTypeRequestDto: RegisterLoveTypeRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerLoveTypeRequestDto' is not null or undefined
      assertParamExists('registerLoveType', 'registerLoveTypeRequestDto', registerLoveTypeRequestDto)
      const localVarPath = `/love-types`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerLoveTypeRequestDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LoveTypesApi - functional programming interface
 * @export
 */
export const LoveTypesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoveTypesApiAxiosParamCreator(configuration)
  return {
    /**
     * 애착 유형의 내용을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 애착 유형 조회
     * @param {string} loveType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLoveType(
      loveType: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoveTypeSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLoveType(loveType, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LoveTypesApi.getLoveType']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 애착 유형 검사의 결과를 등록합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 애착 유형 검사 결과 등록
     * @param {RegisterLoveTypeRequestDto} registerLoveTypeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerLoveType(
      registerLoveTypeRequestDto: RegisterLoveTypeRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterLoveTypeSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.registerLoveType(registerLoveTypeRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LoveTypesApi.registerLoveType']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * LoveTypesApi - factory interface
 * @export
 */
export const LoveTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = LoveTypesApiFp(configuration)
  return {
    /**
     * 애착 유형의 내용을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 애착 유형 조회
     * @param {LoveTypesApiGetLoveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoveType(
      requestParameters: LoveTypesApiGetLoveTypeRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetLoveTypeSuccessResponse> {
      return localVarFp.getLoveType(requestParameters.loveType, options).then((request) => request(axios, basePath))
    },
    /**
     * 애착 유형 검사의 결과를 등록합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 애착 유형 검사 결과 등록
     * @param {LoveTypesApiRegisterLoveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerLoveType(
      requestParameters: LoveTypesApiRegisterLoveTypeRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<RegisterLoveTypeSuccessResponse> {
      return localVarFp
        .registerLoveType(requestParameters.registerLoveTypeRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for getLoveType operation in LoveTypesApi.
 * @export
 * @interface LoveTypesApiGetLoveTypeRequest
 */
export interface LoveTypesApiGetLoveTypeRequest {
  /**
   *
   * @type {string}
   * @memberof LoveTypesApiGetLoveType
   */
  readonly loveType: string
}

/**
 * Request parameters for registerLoveType operation in LoveTypesApi.
 * @export
 * @interface LoveTypesApiRegisterLoveTypeRequest
 */
export interface LoveTypesApiRegisterLoveTypeRequest {
  /**
   *
   * @type {RegisterLoveTypeRequestDto}
   * @memberof LoveTypesApiRegisterLoveType
   */
  readonly registerLoveTypeRequestDto: RegisterLoveTypeRequestDto
}

/**
 * LoveTypesApi - object-oriented interface
 * @export
 * @class LoveTypesApi
 * @extends {BaseAPI}
 */
export class LoveTypesApi extends BaseAPI {
  /**
   * 애착 유형의 내용을 조회합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 애착 유형 조회
   * @param {LoveTypesApiGetLoveTypeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoveTypesApi
   */
  public getLoveType(requestParameters: LoveTypesApiGetLoveTypeRequest, options?: RawAxiosRequestConfig) {
    return LoveTypesApiFp(this.configuration)
      .getLoveType(requestParameters.loveType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 애착 유형 검사의 결과를 등록합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 애착 유형 검사 결과 등록
   * @param {LoveTypesApiRegisterLoveTypeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoveTypesApi
   */
  public registerLoveType(requestParameters: LoveTypesApiRegisterLoveTypeRequest, options?: RawAxiosRequestConfig) {
    return LoveTypesApiFp(this.configuration)
      .registerLoveType(requestParameters.registerLoveTypeRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
