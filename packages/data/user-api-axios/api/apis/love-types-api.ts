/* tslint:disable */
/* eslint-disable */
/**
 * Malmo API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { LoveTypeQuestionCalculateSuccessResponse } from '../models'
// @ts-ignore
import type { LoveTypeQuestionSuccessResponse } from '../models'
// @ts-ignore
import type { RegisterLoveTypeRequestDto } from '../models'
// @ts-ignore
import type { SwaggerErrorResponse } from '../models'
/**
 * LoveTypesApi - axios parameter creator
 */
export const LoveTypesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 애착 유형 검사의 질문을 조회합니다.
     * @summary 애착 유형 검사 질문 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoveTypeQuestions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/love-types/questions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 애착 유형 검사 답변의 결과를 조회합니다. 답변 등록 시와 동일한 결과를 반환합니다.
     * @summary 애착 유형 검사 결과 조회
     * @param {number} loveTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoveTypeResult: async (loveTypeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'loveTypeId' is not null or undefined
      assertParamExists('getLoveTypeResult', 'loveTypeId', loveTypeId)
      const localVarPath = `/love-types/result/{loveTypeId}`.replace(
        `{${'loveTypeId'}}`,
        encodeURIComponent(String(loveTypeId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 애착 유형 검사 답변의 결과를 조회합니다.
     * @summary 애착 유형 검사 질문 답변 및 결과 조회
     * @param {RegisterLoveTypeRequestDto} registerLoveTypeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerResult: async (
      registerLoveTypeRequestDto: RegisterLoveTypeRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerLoveTypeRequestDto' is not null or undefined
      assertParamExists('registerResult', 'registerLoveTypeRequestDto', registerLoveTypeRequestDto)
      const localVarPath = `/love-types/result`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerLoveTypeRequestDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LoveTypesApi - functional programming interface
 */
export const LoveTypesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoveTypesApiAxiosParamCreator(configuration)
  return {
    /**
     * 애착 유형 검사의 질문을 조회합니다.
     * @summary 애착 유형 검사 질문 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLoveTypeQuestions(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoveTypeQuestionSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLoveTypeQuestions(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LoveTypesApi.getLoveTypeQuestions']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 애착 유형 검사 답변의 결과를 조회합니다. 답변 등록 시와 동일한 결과를 반환합니다.
     * @summary 애착 유형 검사 결과 조회
     * @param {number} loveTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLoveTypeResult(
      loveTypeId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoveTypeQuestionCalculateSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLoveTypeResult(loveTypeId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LoveTypesApi.getLoveTypeResult']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 애착 유형 검사 답변의 결과를 조회합니다.
     * @summary 애착 유형 검사 질문 답변 및 결과 조회
     * @param {RegisterLoveTypeRequestDto} registerLoveTypeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerResult(
      registerLoveTypeRequestDto: RegisterLoveTypeRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoveTypeQuestionCalculateSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.registerResult(registerLoveTypeRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LoveTypesApi.registerResult']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * LoveTypesApi - factory interface
 */
export const LoveTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = LoveTypesApiFp(configuration)
  return {
    /**
     * 애착 유형 검사의 질문을 조회합니다.
     * @summary 애착 유형 검사 질문 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoveTypeQuestions(options?: RawAxiosRequestConfig): AxiosPromise<LoveTypeQuestionSuccessResponse> {
      return localVarFp.getLoveTypeQuestions(options).then((request) => request(axios, basePath))
    },
    /**
     * 애착 유형 검사 답변의 결과를 조회합니다. 답변 등록 시와 동일한 결과를 반환합니다.
     * @summary 애착 유형 검사 결과 조회
     * @param {LoveTypesApiGetLoveTypeResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoveTypeResult(
      requestParameters: LoveTypesApiGetLoveTypeResultRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LoveTypeQuestionCalculateSuccessResponse> {
      return localVarFp
        .getLoveTypeResult(requestParameters.loveTypeId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 애착 유형 검사 답변의 결과를 조회합니다.
     * @summary 애착 유형 검사 질문 답변 및 결과 조회
     * @param {LoveTypesApiRegisterResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerResult(
      requestParameters: LoveTypesApiRegisterResultRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LoveTypeQuestionCalculateSuccessResponse> {
      return localVarFp
        .registerResult(requestParameters.registerLoveTypeRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for getLoveTypeResult operation in LoveTypesApi.
 */
export interface LoveTypesApiGetLoveTypeResultRequest {
  readonly loveTypeId: number
}

/**
 * Request parameters for registerResult operation in LoveTypesApi.
 */
export interface LoveTypesApiRegisterResultRequest {
  readonly registerLoveTypeRequestDto: RegisterLoveTypeRequestDto
}

/**
 * LoveTypesApi - object-oriented interface
 */
export class LoveTypesApi extends BaseAPI {
  /**
   * 애착 유형 검사의 질문을 조회합니다.
   * @summary 애착 유형 검사 질문 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getLoveTypeQuestions(options?: RawAxiosRequestConfig) {
    return LoveTypesApiFp(this.configuration)
      .getLoveTypeQuestions(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 애착 유형 검사 답변의 결과를 조회합니다. 답변 등록 시와 동일한 결과를 반환합니다.
   * @summary 애착 유형 검사 결과 조회
   * @param {LoveTypesApiGetLoveTypeResultRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getLoveTypeResult(requestParameters: LoveTypesApiGetLoveTypeResultRequest, options?: RawAxiosRequestConfig) {
    return LoveTypesApiFp(this.configuration)
      .getLoveTypeResult(requestParameters.loveTypeId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 애착 유형 검사 답변의 결과를 조회합니다.
   * @summary 애착 유형 검사 질문 답변 및 결과 조회
   * @param {LoveTypesApiRegisterResultRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public registerResult(requestParameters: LoveTypesApiRegisterResultRequest, options?: RawAxiosRequestConfig) {
    return LoveTypesApiFp(this.configuration)
      .registerResult(requestParameters.registerLoveTypeRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
