/* tslint:disable */
/* eslint-disable */
/**
 * Malmo API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { GetPendingMemberNotificationSuccessResponse } from '../models'
// @ts-ignore
import type { ProcessNotificationsRequestDto } from '../models'
// @ts-ignore
import type { ReadMemberNotificationSuccessResponse } from '../models'
// @ts-ignore
import type { SwaggerErrorResponse } from '../models'
/**
 * MembersAlarmsApi - axios parameter creator
 */
export const MembersAlarmsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 현재 로그인된 멤버의 미조회 알림을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 멤버 미조회 알림 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberPendingNotification: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/members/notifications/pending`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 현재 로그인된 멤버의 미조회 알림을 조회 처리합니다. JWT 토큰이 필요합니다.
     * @summary 멤버 미조회 알림 조회 처리
     * @param {ProcessNotificationsRequestDto} processNotificationsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotifications: async (
      processNotificationsRequestDto: ProcessNotificationsRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'processNotificationsRequestDto' is not null or undefined
      assertParamExists('processNotifications', 'processNotificationsRequestDto', processNotificationsRequestDto)
      const localVarPath = `/members/notifications/pending`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        processNotificationsRequestDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MembersAlarmsApi - functional programming interface
 */
export const MembersAlarmsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MembersAlarmsApiAxiosParamCreator(configuration)
  return {
    /**
     * 현재 로그인된 멤버의 미조회 알림을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 멤버 미조회 알림 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMemberPendingNotification(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPendingMemberNotificationSuccessResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberPendingNotification(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersAlarmsApi.getMemberPendingNotification']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 현재 로그인된 멤버의 미조회 알림을 조회 처리합니다. JWT 토큰이 필요합니다.
     * @summary 멤버 미조회 알림 조회 처리
     * @param {ProcessNotificationsRequestDto} processNotificationsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async processNotifications(
      processNotificationsRequestDto: ProcessNotificationsRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadMemberNotificationSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.processNotifications(
        processNotificationsRequestDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersAlarmsApi.processNotifications']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * MembersAlarmsApi - factory interface
 */
export const MembersAlarmsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MembersAlarmsApiFp(configuration)
  return {
    /**
     * 현재 로그인된 멤버의 미조회 알림을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 멤버 미조회 알림 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberPendingNotification(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetPendingMemberNotificationSuccessResponse> {
      return localVarFp.getMemberPendingNotification(options).then((request) => request(axios, basePath))
    },
    /**
     * 현재 로그인된 멤버의 미조회 알림을 조회 처리합니다. JWT 토큰이 필요합니다.
     * @summary 멤버 미조회 알림 조회 처리
     * @param {MembersAlarmsApiProcessNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotifications(
      requestParameters: MembersAlarmsApiProcessNotificationsRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ReadMemberNotificationSuccessResponse> {
      return localVarFp
        .processNotifications(requestParameters.processNotificationsRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for processNotifications operation in MembersAlarmsApi.
 */
export interface MembersAlarmsApiProcessNotificationsRequest {
  readonly processNotificationsRequestDto: ProcessNotificationsRequestDto
}

/**
 * MembersAlarmsApi - object-oriented interface
 */
export class MembersAlarmsApi extends BaseAPI {
  /**
   * 현재 로그인된 멤버의 미조회 알림을 조회합니다. JWT 토큰이 필요합니다.
   * @summary 멤버 미조회 알림 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getMemberPendingNotification(options?: RawAxiosRequestConfig) {
    return MembersAlarmsApiFp(this.configuration)
      .getMemberPendingNotification(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 현재 로그인된 멤버의 미조회 알림을 조회 처리합니다. JWT 토큰이 필요합니다.
   * @summary 멤버 미조회 알림 조회 처리
   * @param {MembersAlarmsApiProcessNotificationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public processNotifications(
    requestParameters: MembersAlarmsApiProcessNotificationsRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MembersAlarmsApiFp(this.configuration)
      .processNotifications(requestParameters.processNotificationsRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
