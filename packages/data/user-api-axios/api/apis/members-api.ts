/* tslint:disable */
/* eslint-disable */
/**
 * Malmo API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { DeleteMemberSuccessResponse } from '../models'
// @ts-ignore
import type { GetInviteCodeSuccessResponse } from '../models'
// @ts-ignore
import type { MemberInfoSuccessResponse } from '../models'
// @ts-ignore
import type { PartnerMemberInfoSuccessResponse } from '../models'
// @ts-ignore
import type { SwaggerErrorResponse } from '../models'
// @ts-ignore
import type { UpdateMemberRequestDto } from '../models'
// @ts-ignore
import type { UpdateMemberSuccessResponse } from '../models'
// @ts-ignore
import type { UpdateMemberTermsRequestDto } from '../models'
// @ts-ignore
import type { UpdateMemberTermsSuccessResponse } from '../models'
/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 현재 로그인된 사용자의 탈퇴를 처리합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/members`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 현재 로그인된 멤버 정보를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 멤버 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/members`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 현재 로그인된 사용자의 초대 코드를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 초대 코드 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberInviteCode: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/members/invite-code`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 현재 로그인된 멤버의 파트너 정보를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 커플 상대 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartnerMemberInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/members/partner`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 현재 로그인된 사용자의 정보를 수정합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 정보 수정
     * @param {UpdateMemberRequestDto} updateMemberRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember: async (
      updateMemberRequestDto: UpdateMemberRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateMemberRequestDto' is not null or undefined
      assertParamExists('updateMember', 'updateMemberRequestDto', updateMemberRequestDto)
      const localVarPath = `/members`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(updateMemberRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 현재 로그인된 사용자의 약관 동의 정보를 수정합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 약관 동의 수정
     * @param {UpdateMemberTermsRequestDto} updateMemberTermsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMemberTerms: async (
      updateMemberTermsRequestDto: UpdateMemberTermsRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateMemberTermsRequestDto' is not null or undefined
      assertParamExists('updateMemberTerms', 'updateMemberTermsRequestDto', updateMemberTermsRequestDto)
      const localVarPath = `/members/terms`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMemberTermsRequestDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
  return {
    /**
     * 현재 로그인된 사용자의 탈퇴를 처리합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMember(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMemberSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersApi.deleteMember']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 현재 로그인된 멤버 정보를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 멤버 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMemberInfo(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberInfoSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberInfo(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersApi.getMemberInfo']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 현재 로그인된 사용자의 초대 코드를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 초대 코드 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMemberInviteCode(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInviteCodeSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberInviteCode(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersApi.getMemberInviteCode']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 현재 로그인된 멤버의 파트너 정보를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 커플 상대 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPartnerMemberInfo(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerMemberInfoSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPartnerMemberInfo(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersApi.getPartnerMemberInfo']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 현재 로그인된 사용자의 정보를 수정합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 정보 수정
     * @param {UpdateMemberRequestDto} updateMemberRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMember(
      updateMemberRequestDto: UpdateMemberRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMemberSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateMember(updateMemberRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersApi.updateMember']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 현재 로그인된 사용자의 약관 동의 정보를 수정합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 약관 동의 수정
     * @param {UpdateMemberTermsRequestDto} updateMemberTermsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMemberTerms(
      updateMemberTermsRequestDto: UpdateMemberTermsRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMemberTermsSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberTerms(updateMemberTermsRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MembersApi.updateMemberTerms']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = MembersApiFp(configuration)
  return {
    /**
     * 현재 로그인된 사용자의 탈퇴를 처리합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(options?: RawAxiosRequestConfig): AxiosPromise<DeleteMemberSuccessResponse> {
      return localVarFp.deleteMember(options).then((request) => request(axios, basePath))
    },
    /**
     * 현재 로그인된 멤버 정보를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 멤버 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberInfo(options?: RawAxiosRequestConfig): AxiosPromise<MemberInfoSuccessResponse> {
      return localVarFp.getMemberInfo(options).then((request) => request(axios, basePath))
    },
    /**
     * 현재 로그인된 사용자의 초대 코드를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 초대 코드 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberInviteCode(options?: RawAxiosRequestConfig): AxiosPromise<GetInviteCodeSuccessResponse> {
      return localVarFp.getMemberInviteCode(options).then((request) => request(axios, basePath))
    },
    /**
     * 현재 로그인된 멤버의 파트너 정보를 조회합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 커플 상대 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartnerMemberInfo(options?: RawAxiosRequestConfig): AxiosPromise<PartnerMemberInfoSuccessResponse> {
      return localVarFp.getPartnerMemberInfo(options).then((request) => request(axios, basePath))
    },
    /**
     * 현재 로그인된 사용자의 정보를 수정합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 정보 수정
     * @param {MembersApiUpdateMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember(
      requestParameters: MembersApiUpdateMemberRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateMemberSuccessResponse> {
      return localVarFp
        .updateMember(requestParameters.updateMemberRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 현재 로그인된 사용자의 약관 동의 정보를 수정합니다. JWT 토큰이 필요합니다.
     * @summary 🚧 [개발 전] 사용자 약관 동의 수정
     * @param {MembersApiUpdateMemberTermsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMemberTerms(
      requestParameters: MembersApiUpdateMemberTermsRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateMemberTermsSuccessResponse> {
      return localVarFp
        .updateMemberTerms(requestParameters.updateMemberTermsRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for updateMember operation in MembersApi.
 * @export
 * @interface MembersApiUpdateMemberRequest
 */
export interface MembersApiUpdateMemberRequest {
  /**
   *
   * @type {UpdateMemberRequestDto}
   * @memberof MembersApiUpdateMember
   */
  readonly updateMemberRequestDto: UpdateMemberRequestDto
}

/**
 * Request parameters for updateMemberTerms operation in MembersApi.
 * @export
 * @interface MembersApiUpdateMemberTermsRequest
 */
export interface MembersApiUpdateMemberTermsRequest {
  /**
   *
   * @type {UpdateMemberTermsRequestDto}
   * @memberof MembersApiUpdateMemberTerms
   */
  readonly updateMemberTermsRequestDto: UpdateMemberTermsRequestDto
}

/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
  /**
   * 현재 로그인된 사용자의 탈퇴를 처리합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 사용자 탈퇴
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  public deleteMember(options?: RawAxiosRequestConfig) {
    return MembersApiFp(this.configuration)
      .deleteMember(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 현재 로그인된 멤버 정보를 조회합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 멤버 정보 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  public getMemberInfo(options?: RawAxiosRequestConfig) {
    return MembersApiFp(this.configuration)
      .getMemberInfo(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 현재 로그인된 사용자의 초대 코드를 조회합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 사용자 초대 코드 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  public getMemberInviteCode(options?: RawAxiosRequestConfig) {
    return MembersApiFp(this.configuration)
      .getMemberInviteCode(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 현재 로그인된 멤버의 파트너 정보를 조회합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 커플 상대 정보 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  public getPartnerMemberInfo(options?: RawAxiosRequestConfig) {
    return MembersApiFp(this.configuration)
      .getPartnerMemberInfo(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 현재 로그인된 사용자의 정보를 수정합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 사용자 정보 수정
   * @param {MembersApiUpdateMemberRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  public updateMember(requestParameters: MembersApiUpdateMemberRequest, options?: RawAxiosRequestConfig) {
    return MembersApiFp(this.configuration)
      .updateMember(requestParameters.updateMemberRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 현재 로그인된 사용자의 약관 동의 정보를 수정합니다. JWT 토큰이 필요합니다.
   * @summary 🚧 [개발 전] 사용자 약관 동의 수정
   * @param {MembersApiUpdateMemberTermsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  public updateMemberTerms(requestParameters: MembersApiUpdateMemberTermsRequest, options?: RawAxiosRequestConfig) {
    return MembersApiFp(this.configuration)
      .updateMemberTerms(requestParameters.updateMemberTermsRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
