/* tslint:disable */
/* eslint-disable */
/**
 * Malmo API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { AnswerRequestDto } from '../models'
// @ts-ignore
import type { AnswerSuccessResponse } from '../models'
// @ts-ignore
import type { PastAnswerSuccessResponse } from '../models'
// @ts-ignore
import type { PastQuestionSuccessResponse } from '../models'
// @ts-ignore
import type { QuestionSuccessResponse } from '../models'
// @ts-ignore
import type { SwaggerErrorResponse } from '../models'
/**
 * QuestionsApi - axios parameter creator
 */
export const QuestionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 커플 질문 답변을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 질문 답변 조회
     * @param {number} coupleQuestionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnswers: async (coupleQuestionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'coupleQuestionId' is not null or undefined
      assertParamExists('getAnswers', 'coupleQuestionId', coupleQuestionId)
      const localVarPath = `/questions/{coupleQuestionId}/answers`.replace(
        `{${'coupleQuestionId'}}`,
        encodeURIComponent(String(coupleQuestionId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 과거 질문 조회
     * @param {number} level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestion: async (level: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'level' is not null or undefined
      assertParamExists('getQuestion', 'level', level)
      const localVarPath = `/questions/{level}`.replace(`{${'level'}}`, encodeURIComponent(String(level)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodayQuestion: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/questions/today`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 커플 오늘의 질문에 답변을 등록합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 답변 등록
     * @param {AnswerRequestDto} answerRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAnswer: async (
      answerRequestDto: AnswerRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'answerRequestDto' is not null or undefined
      assertParamExists('postAnswer', 'answerRequestDto', answerRequestDto)
      const localVarPath = `/questions/today/answers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(answerRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 커플 오늘의 질문에 답변을 수정합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 답변 수정
     * @param {AnswerRequestDto} answerRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAnswer: async (
      answerRequestDto: AnswerRequestDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'answerRequestDto' is not null or undefined
      assertParamExists('updateAnswer', 'answerRequestDto', answerRequestDto)
      const localVarPath = `/questions/today/answers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(answerRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QuestionsApi - functional programming interface
 */
export const QuestionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QuestionsApiAxiosParamCreator(configuration)
  return {
    /**
     * 커플 질문 답변을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 질문 답변 조회
     * @param {number} coupleQuestionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAnswers(
      coupleQuestionId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PastAnswerSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAnswers(coupleQuestionId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['QuestionsApi.getAnswers']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 과거 질문 조회
     * @param {number} level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQuestion(
      level: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PastQuestionSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestion(level, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['QuestionsApi.getQuestion']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTodayQuestion(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTodayQuestion(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['QuestionsApi.getTodayQuestion']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 커플 오늘의 질문에 답변을 등록합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 답변 등록
     * @param {AnswerRequestDto} answerRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postAnswer(
      answerRequestDto: AnswerRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postAnswer(answerRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['QuestionsApi.postAnswer']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 커플 오늘의 질문에 답변을 수정합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 답변 수정
     * @param {AnswerRequestDto} answerRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAnswer(
      answerRequestDto: AnswerRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateAnswer(answerRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['QuestionsApi.updateAnswer']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * QuestionsApi - factory interface
 */
export const QuestionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = QuestionsApiFp(configuration)
  return {
    /**
     * 커플 질문 답변을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 질문 답변 조회
     * @param {QuestionsApiGetAnswersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnswers(
      requestParameters: QuestionsApiGetAnswersRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PastAnswerSuccessResponse> {
      return localVarFp
        .getAnswers(requestParameters.coupleQuestionId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 과거 질문 조회
     * @param {QuestionsApiGetQuestionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestion(
      requestParameters: QuestionsApiGetQuestionRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PastQuestionSuccessResponse> {
      return localVarFp.getQuestion(requestParameters.level, options).then((request) => request(axios, basePath))
    },
    /**
     * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodayQuestion(options?: RawAxiosRequestConfig): AxiosPromise<QuestionSuccessResponse> {
      return localVarFp.getTodayQuestion(options).then((request) => request(axios, basePath))
    },
    /**
     * 커플 오늘의 질문에 답변을 등록합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 답변 등록
     * @param {QuestionsApiPostAnswerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAnswer(
      requestParameters: QuestionsApiPostAnswerRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AnswerSuccessResponse> {
      return localVarFp
        .postAnswer(requestParameters.answerRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 커플 오늘의 질문에 답변을 수정합니다. JWT 토큰이 필요합니다.
     * @summary 오늘의 질문 답변 수정
     * @param {QuestionsApiUpdateAnswerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAnswer(
      requestParameters: QuestionsApiUpdateAnswerRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AnswerSuccessResponse> {
      return localVarFp
        .updateAnswer(requestParameters.answerRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for getAnswers operation in QuestionsApi.
 */
export interface QuestionsApiGetAnswersRequest {
  readonly coupleQuestionId: number
}

/**
 * Request parameters for getQuestion operation in QuestionsApi.
 */
export interface QuestionsApiGetQuestionRequest {
  readonly level: number
}

/**
 * Request parameters for postAnswer operation in QuestionsApi.
 */
export interface QuestionsApiPostAnswerRequest {
  readonly answerRequestDto: AnswerRequestDto
}

/**
 * Request parameters for updateAnswer operation in QuestionsApi.
 */
export interface QuestionsApiUpdateAnswerRequest {
  readonly answerRequestDto: AnswerRequestDto
}

/**
 * QuestionsApi - object-oriented interface
 */
export class QuestionsApi extends BaseAPI {
  /**
   * 커플 질문 답변을 조회합니다. JWT 토큰이 필요합니다.
   * @summary 질문 답변 조회
   * @param {QuestionsApiGetAnswersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getAnswers(requestParameters: QuestionsApiGetAnswersRequest, options?: RawAxiosRequestConfig) {
    return QuestionsApiFp(this.configuration)
      .getAnswers(requestParameters.coupleQuestionId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
   * @summary 과거 질문 조회
   * @param {QuestionsApiGetQuestionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getQuestion(requestParameters: QuestionsApiGetQuestionRequest, options?: RawAxiosRequestConfig) {
    return QuestionsApiFp(this.configuration)
      .getQuestion(requestParameters.level, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 커플 오늘의 질문을 조회합니다. JWT 토큰이 필요합니다.
   * @summary 오늘의 질문 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getTodayQuestion(options?: RawAxiosRequestConfig) {
    return QuestionsApiFp(this.configuration)
      .getTodayQuestion(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 커플 오늘의 질문에 답변을 등록합니다. JWT 토큰이 필요합니다.
   * @summary 오늘의 질문 답변 등록
   * @param {QuestionsApiPostAnswerRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public postAnswer(requestParameters: QuestionsApiPostAnswerRequest, options?: RawAxiosRequestConfig) {
    return QuestionsApiFp(this.configuration)
      .postAnswer(requestParameters.answerRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 커플 오늘의 질문에 답변을 수정합니다. JWT 토큰이 필요합니다.
   * @summary 오늘의 질문 답변 수정
   * @param {QuestionsApiUpdateAnswerRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public updateAnswer(requestParameters: QuestionsApiUpdateAnswerRequest, options?: RawAxiosRequestConfig) {
    return QuestionsApiFp(this.configuration)
      .updateAnswer(requestParameters.answerRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
