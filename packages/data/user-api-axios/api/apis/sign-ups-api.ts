/* tslint:disable */
/* eslint-disable */
/**
 * Malmo API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { SignUpRequestDto } from '../models'
// @ts-ignore
import type { SignUpSuccessResponse } from '../models'
// @ts-ignore
import type { SwaggerErrorResponse } from '../models'
/**
 * SignUpsApi - axios parameter creator
 * @export
 */
export const SignUpsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 인증된 사용자의 추가 정보를 입력받아 회원가입을 완료합니다. JWT 토큰이 필요합니다.
     * @summary 회원가입
     * @param {SignUpRequestDto} signUpRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (signUpRequestDto: SignUpRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'signUpRequestDto' is not null or undefined
      assertParamExists('signUp', 'signUpRequestDto', signUpRequestDto)
      const localVarPath = `/members/onboarding`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(signUpRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SignUpsApi - functional programming interface
 * @export
 */
export const SignUpsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SignUpsApiAxiosParamCreator(configuration)
  return {
    /**
     * 인증된 사용자의 추가 정보를 입력받아 회원가입을 완료합니다. JWT 토큰이 필요합니다.
     * @summary 회원가입
     * @param {SignUpRequestDto} signUpRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signUpRequestDto: SignUpRequestDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUpSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signUpRequestDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SignUpsApi.signUp']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * SignUpsApi - factory interface
 * @export
 */
export const SignUpsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SignUpsApiFp(configuration)
  return {
    /**
     * 인증된 사용자의 추가 정보를 입력받아 회원가입을 완료합니다. JWT 토큰이 필요합니다.
     * @summary 회원가입
     * @param {SignUpsApiSignUpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(
      requestParameters: SignUpsApiSignUpRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SignUpSuccessResponse> {
      return localVarFp.signUp(requestParameters.signUpRequestDto, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for signUp operation in SignUpsApi.
 * @export
 * @interface SignUpsApiSignUpRequest
 */
export interface SignUpsApiSignUpRequest {
  /**
   *
   * @type {SignUpRequestDto}
   * @memberof SignUpsApiSignUp
   */
  readonly signUpRequestDto: SignUpRequestDto
}

/**
 * SignUpsApi - object-oriented interface
 * @export
 * @class SignUpsApi
 * @extends {BaseAPI}
 */
export class SignUpsApi extends BaseAPI {
  /**
   * 인증된 사용자의 추가 정보를 입력받아 회원가입을 완료합니다. JWT 토큰이 필요합니다.
   * @summary 회원가입
   * @param {SignUpsApiSignUpRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignUpsApi
   */
  public signUp(requestParameters: SignUpsApiSignUpRequest, options?: RawAxiosRequestConfig) {
    return SignUpsApiFp(this.configuration)
      .signUp(requestParameters.signUpRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
