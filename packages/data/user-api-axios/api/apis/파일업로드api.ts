/* tslint:disable */
/* eslint-disable */
/**
 * care1-api 사용자 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { GetFilesUploadResDto } from '../models'
// @ts-ignore
import type { PostFilesUploadReqDto } from '../models'
// @ts-ignore
import type { PostFilesUploadResDto } from '../models'
/**
 * 파일업로드Api - axios parameter creator
 * @export
 */
export const 파일업로드ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {FilesControllerGetUploadTypeEnum} type
     * @param {string} mimeType
     * @param {string} [name]
     * @param {number} [width]
     * @param {number} [height]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetUpload: async (
      type: FilesControllerGetUploadTypeEnum,
      mimeType: string,
      name?: string,
      width?: number,
      height?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      assertParamExists('filesControllerGetUpload', 'type', type)
      // verify required parameter 'mimeType' is not null or undefined
      assertParamExists('filesControllerGetUpload', 'mimeType', mimeType)
      const localVarPath = `/files/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (mimeType !== undefined) {
        localVarQueryParameter['mimeType'] = mimeType
      }

      if (width !== undefined) {
        localVarQueryParameter['width'] = width
      }

      if (height !== undefined) {
        localVarQueryParameter['height'] = height
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 임시 파일 저장
     * @param {PostFilesUploadReqDto} postFilesUploadReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerPostUpload: async (
      postFilesUploadReqDto: PostFilesUploadReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postFilesUploadReqDto' is not null or undefined
      assertParamExists('filesControllerPostUpload', 'postFilesUploadReqDto', postFilesUploadReqDto)
      const localVarPath = `/files/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(postFilesUploadReqDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * 파일업로드Api - functional programming interface
 * @export
 */
export const 파일업로드ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 파일업로드ApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {FilesControllerGetUploadTypeEnum} type
     * @param {string} mimeType
     * @param {string} [name]
     * @param {number} [width]
     * @param {number} [height]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerGetUpload(
      type: FilesControllerGetUploadTypeEnum,
      mimeType: string,
      name?: string,
      width?: number,
      height?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFilesUploadResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerGetUpload(
        type,
        mimeType,
        name,
        width,
        height,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['파일업로드Api.filesControllerGetUpload']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 임시 파일 저장
     * @param {PostFilesUploadReqDto} postFilesUploadReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerPostUpload(
      postFilesUploadReqDto: PostFilesUploadReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostFilesUploadResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerPostUpload(
        postFilesUploadReqDto,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['파일업로드Api.filesControllerPostUpload']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * 파일업로드Api - factory interface
 * @export
 */
export const 파일업로드ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = 파일업로드ApiFp(configuration)
  return {
    /**
     *
     * @param {파일업로드ApiFilesControllerGetUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetUpload(
      requestParameters: 파일업로드ApiFilesControllerGetUploadRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetFilesUploadResDto> {
      return localVarFp
        .filesControllerGetUpload(
          requestParameters.type,
          requestParameters.mimeType,
          requestParameters.name,
          requestParameters.width,
          requestParameters.height,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 임시 파일 저장
     * @param {파일업로드ApiFilesControllerPostUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerPostUpload(
      requestParameters: 파일업로드ApiFilesControllerPostUploadRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PostFilesUploadResDto> {
      return localVarFp
        .filesControllerPostUpload(requestParameters.postFilesUploadReqDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for filesControllerGetUpload operation in 파일업로드Api.
 * @export
 * @interface 파일업로드ApiFilesControllerGetUploadRequest
 */
export interface 파일업로드ApiFilesControllerGetUploadRequest {
  /**
   *
   * @type {'image' | 'file'}
   * @memberof 파일업로드ApiFilesControllerGetUpload
   */
  readonly type: FilesControllerGetUploadTypeEnum

  /**
   *
   * @type {string}
   * @memberof 파일업로드ApiFilesControllerGetUpload
   */
  readonly mimeType: string

  /**
   *
   * @type {string}
   * @memberof 파일업로드ApiFilesControllerGetUpload
   */
  readonly name?: string

  /**
   *
   * @type {number}
   * @memberof 파일업로드ApiFilesControllerGetUpload
   */
  readonly width?: number

  /**
   *
   * @type {number}
   * @memberof 파일업로드ApiFilesControllerGetUpload
   */
  readonly height?: number
}

/**
 * Request parameters for filesControllerPostUpload operation in 파일업로드Api.
 * @export
 * @interface 파일업로드ApiFilesControllerPostUploadRequest
 */
export interface 파일업로드ApiFilesControllerPostUploadRequest {
  /**
   *
   * @type {PostFilesUploadReqDto}
   * @memberof 파일업로드ApiFilesControllerPostUpload
   */
  readonly postFilesUploadReqDto: PostFilesUploadReqDto
}

/**
 * 파일업로드Api - object-oriented interface
 * @export
 * @class 파일업로드Api
 * @extends {BaseAPI}
 */
export class 파일업로드Api extends BaseAPI {
  /**
   *
   * @param {파일업로드ApiFilesControllerGetUploadRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 파일업로드Api
   */
  public filesControllerGetUpload(
    requestParameters: 파일업로드ApiFilesControllerGetUploadRequest,
    options?: RawAxiosRequestConfig
  ) {
    return 파일업로드ApiFp(this.configuration)
      .filesControllerGetUpload(
        requestParameters.type,
        requestParameters.mimeType,
        requestParameters.name,
        requestParameters.width,
        requestParameters.height,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 임시 파일 저장
   * @param {파일업로드ApiFilesControllerPostUploadRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 파일업로드Api
   */
  public filesControllerPostUpload(
    requestParameters: 파일업로드ApiFilesControllerPostUploadRequest,
    options?: RawAxiosRequestConfig
  ) {
    return 파일업로드ApiFp(this.configuration)
      .filesControllerPostUpload(requestParameters.postFilesUploadReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const FilesControllerGetUploadTypeEnum = {
  Image: 'image',
  File: 'file',
} as const
export type FilesControllerGetUploadTypeEnum =
  (typeof FilesControllerGetUploadTypeEnum)[keyof typeof FilesControllerGetUploadTypeEnum]
