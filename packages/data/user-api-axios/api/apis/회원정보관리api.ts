/* tslint:disable */
/* eslint-disable */
/**
 * care1-api 사용자 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { GetUsersResDto } from '../models'
// @ts-ignore
import type { IdParamsDto } from '../models'
// @ts-ignore
import type { PatchUserReqDto } from '../models'
/**
 * 회원정보관리Api - axios parameter creator
 * @export
 */
export const 회원정보관리ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 회원 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 회원 정보 수정
     * @param {PatchUserReqDto} patchUserReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate: async (
      patchUserReqDto: PatchUserReqDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'patchUserReqDto' is not null or undefined
      assertParamExists('usersControllerUpdate', 'patchUserReqDto', patchUserReqDto)
      const localVarPath = `/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(patchUserReqDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * 회원정보관리Api - functional programming interface
 * @export
 */
export const 회원정보관리ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 회원정보관리ApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerDelete(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDelete(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['회원정보관리Api.usersControllerDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 회원 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerGet(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGet(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['회원정보관리Api.usersControllerGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 회원 정보 수정
     * @param {PatchUserReqDto} patchUserReqDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerUpdate(
      patchUserReqDto: PatchUserReqDto,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdParamsDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(patchUserReqDto, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['회원정보관리Api.usersControllerUpdate']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * 회원정보관리Api - factory interface
 * @export
 */
export const 회원정보관리ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 회원정보관리ApiFp(configuration)
  return {
    /**
     *
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.usersControllerDelete(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 회원 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGet(options?: RawAxiosRequestConfig): AxiosPromise<GetUsersResDto> {
      return localVarFp.usersControllerGet(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 회원 정보 수정
     * @param {회원정보관리ApiUsersControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate(
      requestParameters: 회원정보관리ApiUsersControllerUpdateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<IdParamsDto> {
      return localVarFp
        .usersControllerUpdate(requestParameters.patchUserReqDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for usersControllerUpdate operation in 회원정보관리Api.
 * @export
 * @interface 회원정보관리ApiUsersControllerUpdateRequest
 */
export interface 회원정보관리ApiUsersControllerUpdateRequest {
  /**
   *
   * @type {PatchUserReqDto}
   * @memberof 회원정보관리ApiUsersControllerUpdate
   */
  readonly patchUserReqDto: PatchUserReqDto
}

/**
 * 회원정보관리Api - object-oriented interface
 * @export
 * @class 회원정보관리Api
 * @extends {BaseAPI}
 */
export class 회원정보관리Api extends BaseAPI {
  /**
   *
   * @summary 회원 탈퇴
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 회원정보관리Api
   */
  public usersControllerDelete(options?: RawAxiosRequestConfig) {
    return 회원정보관리ApiFp(this.configuration)
      .usersControllerDelete(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 회원 정보 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 회원정보관리Api
   */
  public usersControllerGet(options?: RawAxiosRequestConfig) {
    return 회원정보관리ApiFp(this.configuration)
      .usersControllerGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 회원 정보 수정
   * @param {회원정보관리ApiUsersControllerUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 회원정보관리Api
   */
  public usersControllerUpdate(
    requestParameters: 회원정보관리ApiUsersControllerUpdateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return 회원정보관리ApiFp(this.configuration)
      .usersControllerUpdate(requestParameters.patchUserReqDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
